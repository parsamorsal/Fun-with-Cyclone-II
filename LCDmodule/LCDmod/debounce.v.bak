module debounce(output out, input pb, clk_50MHZ);
    reg slow_clk;
    wire Q1,Q2,Q2_bar;

    reg [26:0]counter=0;
    always @(posedge Clk_100M)
    begin
        counter <= (counter>=499999)?0:counter+1;
        slow_clk <= (counter < 250000)?1'b0:1'b1;
    end

    my_dff d1(slow_clk, pb,Q1 );
    my_dff d2(slow_clk, Q1,Q2 );
    assign Q2_bar = ~Q2;
    assign out = Q1 & Q2_bar;
endmodule


module clock_div(input Clk_100M, output reg slow_clk);
    reg [26:0]counter=0;
    always @(posedge Clk_100M)
    begin
        counter <= (counter>=249999)?0:counter+1;
        slow_clk <= (counter < 125000)?1'b0:1'b1;
    end
endmodule


module my_dff(input DFF_CLOCK, D, output reg Q);

    always @ (posedge DFF_CLOCK) begin
        Q <= D;
    end

endmodule